# This file is part of libertine linux's package libertine_filesystem_root_password. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem_root_password/master/COPYRIGHT. No part of libertine linux's package libertine_filesystem_root_password, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package libertine_filesystem_root_password. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem_root_password/master/COPYRIGHT.


variant=filesystem

depends build_busybox

build_needs tr chmod
libertine_compile_libertine_filesystem_root_password()
{
	local sourcePath="$(libertine_public_sourcePath)"
	local outputSysrootFolderPath="$(libertine_public_outputInitramfsPath)"
	
	libertine_public_copy_filesystem "$sourcePath"/ "$outputSysrootFolderPath"/
	
	core_variable_setVariableIfUnset libertine_filesystem_root_password_hashedSaltedPassword '!'
	
	local passwordLine
	if [ "$libertine_filesystem_root_password_hashedSaltedPassword" = '!' ]; then
		passwordLine='root:!::0:::::'
	else
		# See bottom of http://manpages.ubuntu.com/manpages/precise/man3/crypt.3.html for why
		local sha512Id='6'
		local sha512IdLength=1
		local sha512SaltLength=16 # May actually be less, but what's the point?
		local sha512PasswordLength=86
		local dollarSignOverHeadLength=3 # $id, $salt, $password
	
		local sha512TotalLength=$((sha512IdLength + sha512SaltLength + sha512PasswordLength + dollarSignOverHeadLength))
		if [ ${#libertine_filesystem_root_password_hashedSaltedPassword} -ne $sha512TotalLength ]; then
			core_exitError 1 "A SHA-512 password must be exactly ${sha512TotalLength} characters long"
		fi
		
		# eg $6$CbUx/Ez/K.K2/cvW$BuR5ar4I2yQmE4phtxjYkpmuog/SgjWAY8IE6opwSXX3SIl4j2B8tr.sVu.MiBbjSBzu5GxTgpjn3rMbR0c9L/
		local lines=0
		local empty
		local id
		local salt
		local password
		while IFS='$' read -r empty id salt password
		do
			if [ $lines -ne 0 ]; then
				core_exitError 1 "Passwords should not contain lines"
			fi
		
			if [ -n "$empty" ]; then
				core_exitError 1 "Bad password format"
			fi
		
			if [ ${#id} -ne $sha512IdLength ]; then
				core_exitError 1 "Ids should be $sha512IdLength character long"
			fi
		
			if [ ${#salt} -ne $sha512SaltLength ]; then
				core_exitError 1 "Salts should be $sha512SaltLength characters long (technically they can be less, but what's the point in 2016)?"
			fi
		
			if [ ${#password} -ne $sha512PasswordLength ]; then
				core_exitError 1 "Passwords should be $sha512PasswordLength characters long"
			fi
		
			if [ "$id" != "$sha512Id" ]; then
				core_exitError 1 "Id should be '$sha512Id' for SHA-512; note that some internet forums (StackOverflow) incorrectly suggest the method to mkpasswd is 'sha-512' - it's 'sha512'; mkpasswd interpets the former as id 5, SHA-256"
			fi
		
			if [ -n "$(printf '%s' "$salt" | tr -d A-Za-z0-9./)" ]; then
				core_exitError 1 "Salt contains characters that are not A-Za-z0-9./"
			fi
		
			if [ -n "$(printf '%s' "$password" | tr -d A-Za-z0-9./)" ]; then
				core_exitError 1 "Password contains characters that are not A-Za-z0-9./"
			fi
		
			lines=$((lines + 1))
		done <<-EOF
			$libertine_filesystem_root_password_hashedSaltedPassword
		EOF
		
		passwordLine="root:${libertine_filesystem_root_password_hashedSaltedPassword}:16953:0:::::"
	fi
	
	chmod 0700 "$outputSysrootFolderPath"/etc/shadow.d
	printf '%s\n' "$passwordLine" >"$outputSysrootFolderPath"/etc/shadow.d/root.shadow
	chmod 0500 "$outputSysrootFolderPath"/etc/shadow.d
}
